// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model user {
  id                 String         @id @default(uuid())
  username           String         @unique
  score              Int            @default(0)
  correctGuesses     Int            @default(0)
  incorrectGuesses   Int            @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  gameSessions       gameSession[]
  createdChallenges  challenge[]    @relation("ChallengeCreator")
  updatedChallenges  challenge[]    @relation("ChallengeUpdater")
  sentInvites        invite[]       @relation("InviteSender")
  createdDestinations destination[]  @relation("DestinationCreator")
  updatedDestinations destination[]  @relation("DestinationUpdater")
}

model destination {
  id            String         @id @default(uuid())
  name          String         @unique
  createdById   String?
  creator       user?          @relation("DestinationCreator", fields: [createdById], references: [id])
  updatedById   String?
  updater       user?          @relation("DestinationUpdater", fields: [updatedById], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  clues         clue[]
  facts         fact[]
  challenges    challenge[]
}

model clue {
  id            String         @id @default(uuid())
  text          String
  difficulty    String         @default("medium") // easy, medium, hard
  destinationId String
  destination   destination    @relation(fields: [destinationId], references: [id], onDelete: Cascade)
}

model fact {
  id            String         @id @default(uuid())
  text          String
  isTrivia      Boolean        @default(false)
  destinationId String
  destination   destination    @relation(fields: [destinationId], references: [id], onDelete: Cascade)
}

model gameSession {
  id            String         @id @default(uuid())
  userId        String
  user          user           @relation(fields: [userId], references: [id], onDelete: Cascade)
  isCorrect     Boolean?       // null if not answered yet
  challengeId   String
  challenge     challenge      @relation(fields: [challengeId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model challenge {
  id            String         @id @default(uuid())
  destinationId String
  destination   destination    @relation(fields: [destinationId], references: [id])
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdById   String?
  updatedById   String?
  creator       user?          @relation("ChallengeCreator", fields: [createdById], references: [id])
  updater       user?          @relation("ChallengeUpdater", fields: [updatedById], references: [id])
  gameSessions  gameSession[]
  invites       invite[]
}

model invite {
  id            String         @id @default(uuid())
  challengeId   String
  challenge     challenge      @relation(fields: [challengeId], references: [id])
  senderId      String
  sender        user           @relation("InviteSender", fields: [senderId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
